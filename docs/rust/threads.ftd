-- ds.page: Rust Thread

-- ds.h1: Creating a New Thread

To create a new thread, call the `std::thread::spawn` function and pass it a
closure containing the code we want ot run in the new thread.

-- ds.code: src/main.rs
lang: rs

use std::thread;
use std::time::Duration;

fn main() {
    thread::spawn(|| {
        for i in 1..10 {
            println!("hi number {} from the spawned thread!", i);
            thread::sleep(Duration::from_millis(1));
        }
    });

    for i in 1..5 {
        println!("hi number {} from the main thread!", i);
        thread::sleep(Duration::from_millis(1));
    }
}

-- ds.markdown:

Note: When the main thread of the rust program completes, all the spawned thread
are shutdown.


-- ds.h1: Waiting for All Thread to Finishing Using join Handles

The code above stops new thread prematurely because main thread is ending. We
also can not guarantee that the spawned thread will get to run at all!

This problem can be fixed by using JoinHandle, thread::spawn return the join
handle and we can join method on it. Now till the spawned thread is not complete
main thread will not die. So this way spawned thread will be completed before
the main thread die.

-- ds.code:
lang: rs

use std::thread;
use std::time::Duration;

fn main() {
    let handle = thread::spawn(|| {
        for i in 1..10 {
            println!("hi number {} from the spawned thread!", i);
            thread::sleep(Duration::from_millis(1));
        }
    });

    for i in 1..5 {
        println!("hi number {} from the main thread!", i);
        thread::sleep(Duration::from_millis(1));
    }

    handle.join().unwrap();
}

-- ds.h1: Using move Closures with Threads

move keyword will move function variable to thread scope and after that they
will be available in the main thread to use them.

-- ds.code: src/main.rs
lang: rs

use std::thread;

fn main() {
    let v = vec![1, 2, 3];

    let handle = thread::spawn(move || {
        println!("Here's a vector: {:?}", v);
    });

    handle.join().unwrap();
}